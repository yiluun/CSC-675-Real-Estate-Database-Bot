-- CREATE DATABASE/SCHEMA
DROP TABLE IF EXISTS CSC675;
CREATE DATABASE IF NOT EXISTS CSC675;
USE CSC675;

-- DROP TABLES
DROP TABLE IF EXISTS Employee;
DROP TABLE IF EXISTS `Payment Method`;
DROP TABLE IF EXISTS Job;
DROP TABLE IF EXISTS Department;
DROP TABLE IF EXISTS Firm;
DROP TABLE IF EXISTS UserAgent;
DROP TABLE IF EXISTS UserProspect;
DROP TABLE IF EXISTS Listing;
DROP TABLE IF EXISTS House;
DROP TABLE IF EXISTS Unit;
DROP TABLE IF EXISTS Apartment;
DROP TABLE IF EXISTS Amenities;
DROP TABLE IF EXISTS Agent;
DROP TABLE IF EXISTS Property;
DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS Address;
DROP TABLE IF EXISTS Prospect;  


-- CREATE TABLES
-- DROP TABLE IF EXISTS Agent;
CREATE TABLE IF NOT EXISTS Agent (
    agent_id INT PRIMARY KEY AUTO_INCREMENT, 
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50),
    name VARCHAR(100) GENERATED ALWAYS AS (CONCAT(first_name, ' ', last_name)), 
    dob VARCHAR(10),
    phone VARCHAR(20),
    email VARCHAR(50),
    age TINYINT
);

 -- DROP TABLE IF EXISTS Address;
 CREATE TABLE IF NOT EXISTS Address (
	address_id INT PRIMARY KEY AUTO_INCREMENT,
    street VARCHAR(50),
    city VARCHAR(30),
    zip_code VARCHAR(6)    
 );

-- DROP TABLE IF EXISTS Property;
 CREATE TABLE IF NOT EXISTS Property (
	property_id INT PRIMARY KEY AUTO_INCREMENT,
    property_name VARCHAR(50),
    address_FK INT,
	CONSTRAINT FK_PROPERTY_ADDRESS FOREIGN KEY (address_FK) REFERENCES Address(address_id) ON DELETE CASCADE ON UPDATE CASCADE
 );
 
-- DROP TABLE IF EXISTS Firm;
CREATE TABLE IF NOT EXISTS Firm (
	firm_id INT PRIMARY KEY AUTO_INCREMENT,
    firm_name VARCHAR(50),
    address_FK INT,
    CONSTRAINT FK_FIRM_ADDRESS FOREIGN KEY (address_FK) REFERENCES Address(address_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS Department;
CREATE TABLE IF NOT EXISTS Department (
	department_id INT PRIMARY KEY AUTO_INCREMENT,
    department_name VARCHAR(30) NOT NULL,
    firm_FK INT,
    CONSTRAINT FK_DEPARTMENT_FIRM FOREIGN KEY (firm_FK) REFERENCES Firm(firm_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS Job;
CREATE TABLE IF NOT EXISTS Job (
	job_id INT PRIMARY KEY AUTO_INCREMENT,
    job_name VARCHAR(30) NOT NULL,
    department_FK INT,
    firm_FK INT,
    CONSTRAINT FK_JOB_DEPARTMENT FOREIGN KEY (department_FK) REFERENCES Department(department_id),
    CONSTRAINT FK_JOB_FIRM FOREIGN KEY (firm_FK) REFERENCES Firm(firm_id)
);

-- DROP TABLE IF EXISTS Employee;
CREATE TABLE IF NOT EXISTS Employee (
	employee_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    name VARCHAR(100) GENERATED ALWAYS AS (CONCAT(first_name, last_name)),
	manager_id INT DEFAULT NULL,
    agent_FK INT,
    firm_FK INT,
    job_FK INT,
    department_FK INT,
    -- CONSTRAINT FK_EMPLOYEE_ADDRESS FOREIGN KEY (address_FK) REFERENCES Address(address_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_EMPLOYEE_FIRM FOREIGN KEY (firm_FK) REFERENCES Firm(firm_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_EMPLOYEE_AGENT FOREIGN KEY (agent_FK) REFERENCES Agent(agent_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_EMPLOYEE_DEPARTMENT FOREIGN KEY (department_FK) REFERENCES Department(department_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_EMPLOYEE_JOB FOREIGN KEY (job_FK) REFERENCES Job(job_id) ON DELETE CASCADE ON UPDATE CASCADE
    );
    
-- DROP TABLE IF EXISTS Prospect;    
CREATE TABLE IF NOT EXISTS Prospect (
	prospect_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    name VARCHAR(100) GENERATED ALWAYS AS (CONCAT(first_name, last_name)),
    dob VARCHAR(20),
    phone VARCHAR(20),
    email VARCHAR(50),
    age TINYINT
    );
    
-- DROP TABLE IF EXISTS User;
CREATE TABLE IF NOT EXISTS User (
	user_id INT PRIMARY KEY AUTO_INCREMENT,
	username VARCHAR(20) NOT NULL,
	email VARCHAR(50),
	phone VARCHAR(20),
	password VARCHAR(30) NOT NULL,
	date_created DATETIME,
	user_type VARCHAR(30),
    address_FK INT DEFAULT NULL,
    CONSTRAINT FK_USER_ADDRESS FOREIGN KEY (address_FK) REFERENCES Address(address_id) ON DELETE SET NULL ON UPDATE CASCADE
 );

-- DROP TABLE IF EXISTS `Payment Method`;
CREATE TABLE IF NOT EXISTS `Payment Method` (
	payment_method_id INT PRIMARY KEY AUTO_INCREMENT,
    payment_method_type VARCHAR(100),
    user_FK INT,
    CONSTRAINT FK_PAYMENTMETHOD_USER FOREIGN KEY (user_FK) REFERENCES User(user_id)
);

DROP TABLE IF EXISTS Invoice;
CREATE TABLE IF NOT EXISTS Invoice (
	invoice_id INT PRIMARY KEY AUTO_INCREMENT,
    payment_type VARCHAR(255),
    payment_datetime DATETIME,
    sale_price DECIMAL(15, 2)
);
    
 
 -- DROP TABLE IF EXISTS UserAgent;
 CREATE TABLE IF NOT EXISTS UserAgent ( -- user account for a real estate agent
	userAgent_id INT PRIMARY KEY AUTO_INCREMENT,
	user_FK INT,
    agent_FK INT,
    sales INT DEFAULT NULL,
    CONSTRAINT FK_USERAGENT_USER FOREIGN KEY (user_FK) REFERENCES User(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_USERAGENT_AGENT FOREIGN KEY (agent_FK) REFERENCES Agent(agent_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS UserProspect;
CREATE TABLE IF NOT EXISTS UserProspect ( -- user account for a prospect/client
	userProspect_id INT PRIMARY KEY AUTO_INCREMENT,
    user_FK INT,
    prospect_FK INT,
    CONSTRAINT FK_USERPROSPECT_USER FOREIGN KEY (user_FK) REFERENCES User(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_USERPROSPECT_PROSPECT FOREIGN KEY (prospect_FK) REFERENCES Prospect(prospect_id) ON DELETE CASCADE ON UPDATE CASCADE
);
	
-- DROP TABLE IF EXISTS Listing;
CREATE TABLE IF NOT EXISTS Listing (
	listing_id INT PRIMARY KEY AUTO_INCREMENT,
	user_FK INT, 
    property_FK INT,
    price DECIMAL(15, 2), 
	CONSTRAINT FK_LISTING_PROPERTY FOREIGN KEY (property_FK) REFERENCES Property(property_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_LISTING_USER FOREIGN KEY (user_FK) REFERENCES User(user_id) ON DELETE CASCADE ON UPDATE CASCADE
 );
 
 -- DROP TABLE IF EXISTS Amenities;
 CREATE TABLE IF NOT EXISTS Amenities (
	amenities_id INT PRIMARY KEY AUTO_INCREMENT,
	property_FK INT,
    num_bedrooms INT,
    num_bathrooms INT,
    num_garage INT,
    num_kitchen INT,
    num_parking INT,
    CONSTRAINT FK_AMENITIES_PROPERTY FOREIGN KEY (property_FK) REFERENCES Property(property_id) ON DELETE CASCADE ON UPDATE CASCADE
);
 
 -- DROP TABLE IF EXISTS House;
 CREATE TABLE IF NOT EXISTS House (
	house_id INT PRIMARY KEY AUTO_INCREMENT,
	property_FK INT,
    -- address_FK INT,
    amenities_FK INT,
    CONSTRAINT FK_HOUSE_AMENITIES FOREIGN KEY (amenities_FK) REFERENCES Amenities(amenities_id) ON DELETE CASCADE ON UPDATE CASCADE,
   -- CONSTRAINT FK_HOUSE_ADDRESS FOREIGN KEY (address_FK) REFERENCES Address(address_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_HOUSE_PROPERTY FOREIGN KEY (property_FK) REFERENCES Property(property_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS Apartment;
CREATE TABLE IF NOT EXISTS Apartment (
	apartment_id INT PRIMARY KEY AUTO_INCREMENT,
	property_FK INT,
 -- address_FK INT,
 -- CONSTRAINT FK_APARTMENT_ADDRESS FOREIGN KEY (address_FK) REFERENCES Address(address_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_APARTMENT_PROPERTY FOREIGN KEY (property_FK) REFERENCES Property(property_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- DROP TABLE IF EXISTS Unit;
CREATE TABLE IF NOT EXISTS Unit (
	unit_id INT PRIMARY KEY AUTO_INCREMENT,
    unit_number INT,
    rent DOUBLE,
    amenities_FK INT,
    apartment_FK INT,
    CONSTRAINT FK_UNIT_APARTMENT FOREIGN KEY (apartment_FK) REFERENCES Apartment(apartment_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_UNITS_AMENITIES FOREIGN KEY (amenities_FK) REFERENCES Amenities(amenities_id) ON DELETE CASCADE ON UPDATE CASCADE
);
 

 -- FUNCTIONS
DELIMITER ;;
DROP FUNCTION IF EXISTS cheapest_property_with_n_bedrooms;
CREATE FUNCTION cheapest_property_with_n_bedrooms (numBedrooms INT)
RETURNS INT DETERMINISTIC
	BEGIN
		DECLARE PropertyID INT;
        DECLARE bedrooms INT;
		SET PropertyID = (SELECT Property.property_id
							FROM Property
							JOIN Listing ON Listing.property_FK = Property.property_id
                            JOIN Amenities ON Amenities.property_FK = Property.property_id
                            GROUP BY Amenities.num_bedrooms
                            HAVING Amenities.num_bedrooms = numBedrooms 
                            );
		RETURN PropertyID;
	END;;
DELIMITER ;

    



/*DELIMETER $$
CREATE TRIGGER Account AFTER DELETE ON User
FOR EACH ROW BEGIN 
	DELETE FROM Account WHERE user1 IS NULL AND user2 IS NULL;
    IF user1 IS NULL THEN
		-- DO SOMETHING
	END IF;
END$$
DELIMITER ;*/

-- ALTER TABLES
-- ALTER TABLE Agent ADD age INT DEFAULT 18;
-- ALTER TABLE Agent MODIFY name VARCHAR(200);
-- ALTER TABLE Agent DROP COLUMN name;
-- ALTER TABLE Agent RENAME TO `New Agent`;
-- ALTER TABLE Agent CHANGE COLUMN name username VARCHAR(100);